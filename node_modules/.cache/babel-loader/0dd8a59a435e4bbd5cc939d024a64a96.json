{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\micha\\\\Documents\\\\Qualified\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport TimeControls from \"./TimeControls\";\nimport TimeDisplay from \"./TimeDisplay\";\nimport ModifyTime from \"./ModifyTime\";\n\nfunction Pomodoro() {\n  const initialTimeState = {\n    focusDuration: 1500,\n    breakDuration: 300,\n    focusRemaining: 1500,\n    breakRemaining: 300,\n    currentRemaining: 1500,\n    ariaRemaining: 0\n  };\n  const initialVisibleElementStates = {\n    showSession: false,\n    sessionTitle: \"Focusing for 25:00 minutes\"\n  };\n  const initialButtonStates = {\n    modifyDurationButtonsDisabled: false,\n    playButtonDisabled: false,\n    stopButtonDisabled: true\n  };\n  const activeButtonStates = {\n    modifyDurationButtonsDisabled: true,\n    playButtonDisabled: false,\n    stopButtonDisabled: false\n  }; // Timer starts out paused\n\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [buttonState, setButtonStates] = useState(initialButtonStates);\n  const [timeData, setDataState] = useState(initialTimeState);\n  const [pageState, setPageState] = useState(initialVisibleElementStates);\n\n  const stop = () => setIsTimerRunning(false);\n\n  const formatTime = seconds => {\n    let formattedSeconds = parseInt(seconds, 10);\n    let mm = Math.floor(formattedSeconds / 60);\n    let ss = formattedSeconds - mm * 60;\n\n    if (mm < 10 && ss < 10) {\n      return `0${mm}:0${ss}`;\n    } else if (mm < 10 && ss > 9) {\n      return `0${mm}:${ss}`;\n    } else if (mm > 9 && ss < 10) {\n      return `${mm}:0${ss}`;\n    } else if (mm > 9 && ss > 9) {\n      return `${mm}:${ss}`;\n    }\n  };\n\n  useInterval(() => {\n    // ToDo: Implement what should happen when the timer is running\n    if (timeData.focusRemaining > 0) {\n      pageState.sessionTitle = `Focusing for ${formatTime(timeData.focusDuration)} minutes`;\n      console.log(timeData.currentRemaining);\n      timeData.currentRemaining = timeData.currentRemaining - 1;\n      timeData.focusRemaining = timeData.currentRemaining;\n      timeData.remainingArialValue = 1 - timeData.currentRemaining / timeData.focusDuration;\n\n      if (timeData.focusRemaining === 0) {\n        new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play();\n        timeData.currentRemaining = timeData.breakDuration;\n      }\n    }\n  }, isTimerRunning ? 1000 : null);\n\n  function playPause() {\n    setIsTimerRunning(prevState => !prevState);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ModifyTime, {\n    timeData: timeData,\n    buttonState: buttonState,\n    formatTime: formatTime,\n    modifyDuration: modifyDuration,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimeControls, {\n    buttonState: buttonState,\n    playPause: playPause,\n    stop: stop,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TimeDisplay, {\n    timeData: timeData,\n    pageState: pageState,\n    formatTime: formatTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["C:/Users/micha/Documents/Qualified/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","classNames","useInterval","TimeControls","TimeDisplay","ModifyTime","Pomodoro","initialTimeState","focusDuration","breakDuration","focusRemaining","breakRemaining","currentRemaining","ariaRemaining","initialVisibleElementStates","showSession","sessionTitle","initialButtonStates","modifyDurationButtonsDisabled","playButtonDisabled","stopButtonDisabled","activeButtonStates","isTimerRunning","setIsTimerRunning","buttonState","setButtonStates","timeData","setDataState","pageState","setPageState","stop","formatTime","seconds","formattedSeconds","parseInt","mm","Math","floor","ss","console","log","remainingArialValue","Audio","play","playPause","prevState","modifyDuration"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport TimeControls from \"./TimeControls\"\nimport TimeDisplay from \"./TimeDisplay\"\nimport ModifyTime from \"./ModifyTime\"\n\nfunction Pomodoro() {\n  const initialTimeState={\n    focusDuration: 1500,\n    breakDuration: 300,\n    focusRemaining: 1500,\n    breakRemaining: 300,\n    currentRemaining: 1500,\n    ariaRemaining: 0,\n  }\n  const initialVisibleElementStates = {\n    showSession: false,\n    sessionTitle: \"Focusing for 25:00 minutes\",\n  }\n\n  const initialButtonStates = {\n    modifyDurationButtonsDisabled: false,\n    playButtonDisabled: false,\n    stopButtonDisabled: true,\n  }\n\n  const activeButtonStates = {\n    modifyDurationButtonsDisabled: true,\n    playButtonDisabled: false,\n    stopButtonDisabled: false,\n  }\n\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  const [buttonState, setButtonStates] = useState(initialButtonStates)\n  const [timeData, setDataState] = useState(initialTimeState)\n  const [pageState, setPageState] = useState(initialVisibleElementStates)\n\n  const stop = () => setIsTimerRunning(false)\n\n  const formatTime = (seconds) => {\n    let formattedSeconds = parseInt(seconds, 10)\n    let mm = Math.floor(formattedSeconds / 60)\n    let ss = (formattedSeconds - mm * 60)\n    if (mm < 10 && ss < 10) {\n      return `0${mm}:0${ss}`\n    } else if (mm < 10 && ss > 9 ) {\n      return `0${mm}:${ss}`\n    } else if (mm > 9 && ss < 10) {\n      return `${mm}:0${ss}`\n    } else if (mm > 9 && ss > 9) {\n      return `${mm}:${ss}`\n    }\n  }\n\n  useInterval(\n    () => {\n      // ToDo: Implement what should happen when the timer is running\n      if(timeData.focusRemaining > 0) {\n        pageState.sessionTitle = `Focusing for ${formatTime(timeData.focusDuration)} minutes`\n        console.log(timeData.currentRemaining)\n        timeData.currentRemaining = timeData.currentRemaining - 1\n        timeData.focusRemaining = timeData.currentRemaining\n        timeData.remainingArialValue = 1 - timeData.currentRemaining / timeData.focusDuration\n        if (timeData.focusRemaining === 0){\n          new Audio(`https://bigsoundbank.com/UPLOAD/mp3/1482.mp3`).play()\n          timeData.currentRemaining = timeData.breakDuration\n        }\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <ModifyTime timeData={timeData} buttonState={buttonState} formatTime={formatTime} modifyDuration={modifyDuration} />\n      <TimeControls buttonState={buttonState} playPause={playPause} stop={stop} isTimerRunning={isTimerRunning} />\n      <TimeDisplay timeData={timeData} pageState={pageState} formatTime={formatTime} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}